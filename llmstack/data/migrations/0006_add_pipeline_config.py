# Generated by Django 4.2.11 on 2024-07-24 17:15

from django.db import migrations

PIPELINE_DATA = {
    "pdf": {
        "source": {"slug": "pdf", "provider_slug": "promptly", "data": {}},
        "transformations": [
            {
                "slug": "semantic-double-merging-splitter-node-parser",
                "provider_slug": "promptly",
                "data": {
                    "merging_range": 1,
                    "max_chunk_size": 1500,
                    "language_config": {
                        "nlp": None,
                        "language": "english",
                        "stopwords": [],
                        "spacy_model": "en_core_web_sm",
                        "model_validation": True,
                    },
                    "include_metadata": True,
                    "initial_threshold": 0.6,
                    "merging_threshold": 0.8,
                    "appending_threshold": 0.8,
                    "include_prev_next_rel": True,
                },
            }
        ],
        "embedding": {"slug": "embeddings-generator", "provider_slug": "promptly", "data": {}},
        "destination": {"slug": "vector-store", "provider_slug": "weaviate", "data": {}},
    },
    "text": {
        "source": {"slug": "text", "provider_slug": "promptly", "data": {}},
        "transformations": [
            {
                "slug": "semantic-double-merging-splitter-node-parser",
                "provider_slug": "promptly",
                "data": {
                    "merging_range": 1,
                    "max_chunk_size": 1500,
                    "language_config": {
                        "nlp": None,
                        "language": "english",
                        "stopwords": [],
                        "spacy_model": "en_core_web_sm",
                        "model_validation": True,
                    },
                    "include_metadata": True,
                    "initial_threshold": 0.6,
                    "merging_threshold": 0.8,
                    "appending_threshold": 0.8,
                    "include_prev_next_rel": True,
                },
            }
        ],
        "embedding": {"slug": "embeddings-generator", "provider_slug": "promptly", "data": {}},
        "destination": {"slug": "vector-store", "provider_slug": "weaviate", "data": {}},
    },
    "url": {
        "source": {"slug": "url", "provider_slug": "promptly", "data": {}},
        "transformations": [
            {
                "slug": "semantic-double-merging-splitter-node-parser",
                "provider_slug": "promptly",
                "data": {
                    "merging_range": 1,
                    "max_chunk_size": 1500,
                    "language_config": {
                        "nlp": None,
                        "language": "english",
                        "stopwords": [],
                        "spacy_model": "en_core_web_sm",
                        "model_validation": True,
                    },
                    "include_metadata": True,
                    "initial_threshold": 0.6,
                    "merging_threshold": 0.8,
                    "appending_threshold": 0.8,
                    "include_prev_next_rel": True,
                },
            }
        ],
        "embedding": {"slug": "embeddings-generator", "provider_slug": "promptly", "data": {}},
        "destination": {"slug": "vector-store", "provider_slug": "weaviate", "data": {}},
    },
    "file": {
        "source": {"slug": "file", "provider_slug": "promptly", "data": {}},
        "transformations": [
            {
                "slug": "semantic-double-merging-splitter-node-parser",
                "provider_slug": "promptly",
                "data": {
                    "merging_range": 1,
                    "max_chunk_size": 1500,
                    "language_config": {
                        "nlp": None,
                        "language": "english",
                        "stopwords": [],
                        "spacy_model": "en_core_web_sm",
                        "model_validation": True,
                    },
                    "include_metadata": True,
                    "initial_threshold": 0.6,
                    "merging_threshold": 0.8,
                    "appending_threshold": 0.8,
                    "include_prev_next_rel": True,
                },
            }
        ],
        "embedding": {"slug": "embeddings-generator", "provider_slug": "promptly", "data": {}},
        "destination": {"slug": "vector-store", "provider_slug": "weaviate", "data": {}},
    },
    "singlestore": {
        "source": None,
        "transformations": [],
        "embedding": None,
        "destination": {"slug": "singlestore", "provider_slug": "singlestore", "data": {}},
    },
}


def delete_legacy_pipeline_from_datasource_config(apps, schema_editor):
    DataSource = apps.get_model("datasources", "DataSource")
    datasources = DataSource.objects.all()
    for datasource in datasources:
        datasource_config = {**datasource.config} or {}
        if "pipeline_legacy" in datasource_config:
            del datasource_config["pipeline_legacy"]
            datasource.config = {**datasource_config}
            datasource.save()
        if "pipeline_legacy_data" in datasource_config:
            del datasource_config["pipeline_legacy_data"]
            datasource.config = {**datasource_config}
            datasource.save()


def add_legacy_pipeline_to_datasource_config(apps, schema_editor):
    from llmstack.base.models import Profile
    from llmstack.data.models import DataSource

    datasources = DataSource.objects.all()
    for datasource in datasources:

        type_slug = datasource.config.get("type_slug")
        if type_slug and type_slug in PIPELINE_DATA:
            pipeline = PIPELINE_DATA[type_slug]
            owner_profile = Profile.objects.get(user=datasource.owner)
            if owner_profile.vectostore_embedding_endpoint == "azure_openai":
                pipeline["embedding"]["data"]["embedding_provider_slug"] = "azure-openai"
            else:
                pipeline["embedding"]["data"]["embedding_provider_slug"] = "openai"

            datasource_config = {**datasource.config} or {}
            datasource_config["pipeline"] = pipeline

            datasource.config = {**datasource_config}
            datasource.save()


class Migration(migrations.Migration):

    dependencies = [
        ("datasources", "0005_populate_type_slug"),
    ]

    operations = [
        migrations.RunPython(
            add_legacy_pipeline_to_datasource_config, reverse_code=delete_legacy_pipeline_from_datasource_config
        ),
    ]
