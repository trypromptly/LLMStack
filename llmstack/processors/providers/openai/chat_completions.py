import copy
import json
import logging
from enum import Enum
from typing import List, Optional

from asgiref.sync import async_to_sync
from pydantic import BaseModel, Field, confloat, conint

from llmstack.apps.schemas import OutputTemplate
from llmstack.common.blocks.llm.openai import (
    OpenAIChatCompletionsAPIProcessorConfiguration,
)
from llmstack.processors.providers.api_processor_interface import (
    CHAT_WIDGET_NAME,
    ApiProcessorInterface,
    ApiProcessorSchema,
)
from llmstack.processors.providers.promptly import get_llm_client_from_provider_config

logger = logging.getLogger(__name__)


class ChatCompletionsModel(str, Enum):
    GPT_4 = "gpt-4"
    GPT_4_O = "gpt-4o"
    GPT_4_O_MINI = "gpt-4o-mini"
    GPT_4_32K = "gpt-4-32k"
    GPT_4_TURBO = "gpt-4-turbo"
    GPT_3_5 = "gpt-3.5-turbo"
    GPT_3_5_16K = "gpt-3.5-turbo-16k"
    GPT_4_LATEST = "gpt-4-0125-preview"
    GPT_4_1106_PREVIEW = "gpt-4-1106-preview"

    def __str__(self):
        return self.value

    def model_name(self):
        return self.value


class Role(str, Enum):
    SYSTEM = "system"
    USER = "user"
    ASSISTANT = "assistant"
    FUNCTION = "function"

    def __str__(self):
        return self.value


class FunctionCallResponse(BaseModel):
    name: Optional[str] = None
    arguments: Optional[str] = None


class ChatMessage(BaseModel):
    role: Optional[Role] = Field(
        default=None,
        description="The role of the message sender. Can be 'user' or 'assistant' or 'system'.",
    )
    content: Optional[str] = Field(
        default="",
        description="The message text.",
        json_schema_extra={"widget": "textarea"},
    )
    name: Optional[str] = Field(
        default="",
        description="The name of the author of this message or the function name.",
        json_schema_extra={"widget": "hidden"},
    )
    function_call: Optional[FunctionCallResponse] = Field(
        default=None,
        description="The name and arguments of a function that should be called, as generated by the model.",
        json_schema_extra={"widget": "hidden"},
    )


class FunctionCall(ApiProcessorSchema):
    name: str = Field(
        default="",
        description="The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
    )
    description: Optional[str] = Field(
        default=None,
        description="The description of what the function does.",
    )
    parameters: Optional[str] = Field(
        title="Parameters",
        json_schema_extra={"widget": "textarea"},
        default=None,
        description="The parameters the functions accepts, described as a JSON Schema object. See the guide for examples, and the JSON Schema reference for documentation about the format.",
    )


class ChatCompletionsInput(ApiProcessorSchema):
    system_message: Optional[str] = Field(
        default="",
        description="A message from the system, which will be prepended to the chat history.",
        json_schema_extra={"widget": "textarea"},
    )
    chat_history: List[ChatMessage] = Field(
        default=[],
        description="A list of messages, each with a role and message text.",
        json_schema_extra={"widget": "hidden"},
    )
    messages: List[ChatMessage] = Field(
        default=[
            ChatMessage(role=Role.USER, function_call=None),
        ],
        description="A list of messages, each with a role and message text.",
    )
    functions: Optional[List[FunctionCall]] = Field(
        default=None,
        description="A list of functions the model may generate JSON inputs for .",
    )

    class Config:
        title = "Chat Completions Input"


class ChatCompletionsOutput(ApiProcessorSchema):
    choices: List[ChatMessage] = Field(
        default=[],
        description="Messages",
        json_schema_extra={"widget": CHAT_WIDGET_NAME},
    )


class ChatCompletionsConfiguration(
    OpenAIChatCompletionsAPIProcessorConfiguration,
    ApiProcessorSchema,
):
    model: str = Field(
        default=ChatCompletionsModel.GPT_4_O_MINI,
        description="ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-4` are supported.",
        json_schema_extra={
            "advanced_parameter": False,
            "widget": "customselect",
            "options": [x.value for x in ChatCompletionsModel],
        },
    )
    max_tokens: Optional[conint(ge=1, le=32000)] = Field(
        1024,
        description="The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).\n",
        example=1024,
        json_schema_extra={"advanced_parameter": False},
    )
    temperature: Optional[confloat(ge=0.0, le=2.0, multiple_of=0.1)] = Field(
        default=0.7,
        description="What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
        example=1,
        json_schema_extra={"advanced_parameter": False},
    )
    seed: Optional[conint(ge=0)] = Field(
        default=None,
        description="A random seed to use for the model. If `None`, a random seed will be chosen.",
        json_schema_extra={"advanced_parameter": False},
    )
    n: Optional[conint(ge=1, le=128)] = Field(
        1,
        description="How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
        example=1,
        json_schema_extra={"widget": "hidden"},
    )
    retain_history: Optional[bool] = Field(
        default=False,
        description="Retain and use the chat history. (Only works in apps)",
        json_schema_extra={"advanced_parameter": False},
    )

    auto_prune_chat_history: Optional[bool] = Field(
        default=False,
        description="Automatically prune chat history. This is only applicable if 'retain_history' is set to 'true'.",
    )

    stream: Optional[bool] = Field(default=True, json_schema_extra={"widget": "hidden"})
    function_call: Optional[str] = Field(
        default=None,
        description="Controls how the model responds to function calls.",
    )


def num_tokens_from_messages(messages, model="gpt-3.5-turbo-0613"):
    import tiktoken

    """Return the number of tokens used by a list of messages."""
    try:
        encoding = tiktoken.encoding_for_model(model)
    except KeyError:
        print("Warning: model not found. Using cl100k_base encoding.")
        encoding = tiktoken.get_encoding("cl100k_base")
    if model in {
        "gpt-3.5-turbo-0613",
        "gpt-3.5-turbo-16k-0613",
        "gpt-4-0314",
        "gpt-4-32k-0314",
        "gpt-4-0613",
        "gpt-4-32k-0613",
    }:
        tokens_per_message = 3
        tokens_per_name = 1
    elif model == "gpt-3.5-turbo-0301":
        # every message follows <|start|>{role/name}\n{content}<|end|>\n
        tokens_per_message = 4
        tokens_per_name = -1  # if there's a name, the role is omitted
    elif "gpt-3.5-turbo" in model:
        return num_tokens_from_messages(messages, model="gpt-3.5-turbo-0613")
    elif "gpt-4" in model:
        return num_tokens_from_messages(messages, model="gpt-4-0613")
    else:
        raise NotImplementedError(
            f"""num_tokens_from_messages() is not implemented for model {model}. See https://github.com/openai/openai-python/blob/main/chatml.md for information on how messages are converted to tokens.""",
        )
    num_tokens = 0

    for message in messages:
        # If message is a string, it's a system message
        num_tokens += tokens_per_message
        for key, value in message.items():
            num_tokens += len(encoding.encode(value))
            if key == "name":
                num_tokens += tokens_per_name
    num_tokens += 3  # every reply is primed with <|start|>assistant<|message|>
    return num_tokens


class ChatCompletions(
    ApiProcessorInterface[ChatCompletionsInput, ChatCompletionsOutput, ChatCompletionsConfiguration],
):
    """
    OpenAI Chat Completions API
    """

    def process_session_data(self, session_data):
        self._chat_history = session_data["chat_history"] if "chat_history" in session_data else []

    @staticmethod
    def name() -> str:
        return "ChatGPT"

    @staticmethod
    def slug() -> str:
        return "chatgpt"

    @staticmethod
    def description() -> str:
        return "Takes a series of messages as input, and return a model-generated message as output"

    @staticmethod
    def provider_slug() -> str:
        return "openai"

    @classmethod
    def get_output_template(cls) -> Optional[OutputTemplate]:
        return OutputTemplate(
            markdown="""{% for choice in choices %}
{{choice.content}}
{% endfor %}""",
        )

    def session_data_to_persist(self) -> dict:
        if self._config.retain_history and self._config.auto_prune_chat_history:
            messages = []
            for message in self._chat_history:
                if isinstance(message, ChatMessage):
                    msg_dict = message.model_dump()
                    messages.append(
                        {
                            "role": msg_dict["role"],
                            "content": msg_dict["content"],
                        },
                    )
                elif isinstance(message, dict):
                    messages.append(
                        {
                            "role": message["role"],
                            "content": message["content"],
                        },
                    )
                else:
                    raise Exception("Invalid chat history")

            # Prune chat history
            while (num_tokens_from_messages(messages) > self._config.max_tokens) and len(messages) > 1:
                messages.pop(0)

            return {"chat_history": messages}

        return {"chat_history": self._chat_history}

    def process(self) -> dict:
        tools = []
        messages = self._chat_history if self._config.retain_history else []

        if self._input.functions:
            for tool_function in self._input.functions:
                tools.append(
                    {
                        "type": "function",
                        "function": {
                            "name": tool_function.name,
                            "description": tool_function.description,
                            "parameters": json.loads(tool_function.parameters),
                        },
                    }
                )
        if self._input.messages:
            for input_message in self._input.messages:
                if input_message.role == Role.USER or input_message.role == Role.ASSISTANT:
                    messages.append(
                        {
                            "role": str(input_message.role),
                            "content": input_message.content,
                        }
                    )

        client = get_llm_client_from_provider_config("openai", self._config.model, self.get_provider_config)
        self._billing_metrics = self.get_provider_config(
            model_slug=self._config.model, provider_slug=self.provider_slug(), processor_slug=self.slug()
        ).get_billing_metrics(
            model_slug=self._config.model, provider_slug=self.provider_slug(), processor_slug=self.slug()
        )

        messages_to_send = (
            [
                {
                    "role": "system",
                    "content": self._input.system_message,
                }
            ]
            + messages
            if self._input.system_message
            else messages
        )
        response = client.chat.completions.create(
            messages=messages_to_send,
            tools=tools if tools else None,
            model=self._config.model,
            stream=True,
            n=1,
            max_tokens=self._config.max_tokens,
            temperature=self._config.temperature,
        )
        async_to_sync(self._output_stream.write)(ChatCompletionsOutput(choices=[ChatMessage(role=Role.ASSISTANT)]))
        for result in response:
            if result.usage:
                self._usage_data["input_token"] = result.usage.input_tokens
                self._usage_data["output_token"] = result.usage.output_tokens

            choice = result.choices[0]
            if choice.delta.content:
                if isinstance(choice.delta.content, str):
                    async_to_sync(self._output_stream.write)(
                        ChatCompletionsOutput(choices=[ChatMessage(content=choice.delta.content)])
                    )
                elif isinstance(choice.delta.content, list):
                    for content in choice.delta.content:
                        if isinstance(content, str):
                            async_to_sync(self._output_stream.write)(
                                ChatCompletionsOutput(choices=[ChatMessage(content=content)])
                            )
                        elif isinstance(content, dict) and content["type"] == "text":
                            async_to_sync(self._output_stream.write)(
                                ChatCompletionsOutput(choices=[ChatMessage(content=content["data"])])
                            )
            if choice.delta.tool_calls:
                for tool_call in choice.delta.tool_calls:
                    if tool_call.function.name:
                        async_to_sync(self._output_stream.write)(
                            ChatCompletionsOutput(
                                choices=[
                                    ChatMessage(
                                        function_call=FunctionCallResponse(
                                            name=tool_call.function.name, arguments=tool_call.function.arguments
                                        )
                                    )
                                ]
                            )
                        )
                    elif tool_call.function.arguments:
                        async_to_sync(self._output_stream.write)(
                            ChatCompletionsOutput(
                                choices=[
                                    ChatMessage(
                                        function_call=FunctionCallResponse(arguments=tool_call.function.arguments)
                                    )
                                ]
                            )
                        )

        output = self._output_stream.finalize()
        if self._config.retain_history:
            self._chat_history = copy.deepcopy(messages)
            self._chat_history.append({"role": "assistant", "content": output.choices[0].content})
        return output
